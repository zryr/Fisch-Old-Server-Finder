-- This script persists visited server IDs and their uptimes using local files and hops to servers in ascending order of players
return {
    checkUptime = function(desiredMinUptimeSeconds)
        local TeleportService = game:GetService("TeleportService")
        local HttpService = game:GetService("HttpService")
        local player = game.Players.LocalPlayer
        local visitedServersFile = "visited_servers.txt"
        local visitedServers = {}

        -- Read visited server IDs and their uptimes from file or create the file if it doesn't exist
        local function loadVisitedServers()
            if pcall(function() return readfile(visitedServersFile) end) then
                local data = readfile(visitedServersFile)
                for line in string.gmatch(data, "[^\n]+") do
                    local serverId, uptime = line:match("([^|]+)|([^|]+)")
                    if serverId and uptime then
                        visitedServers[serverId] = tonumber(uptime)
                    end
                end
            else
                -- Create a new file if it doesn't exist
                writefile(visitedServersFile, "")
                print("Created new visited servers file.")
            end
        end

        -- Write visited server IDs and their uptimes to file
        local function saveVisitedServers()
            local data = ""
            for serverId, uptime in pairs(visitedServers) do
                data = data .. serverId .. " | " .. uptime .. "\n"
            end
            writefile(visitedServersFile, data)
            print("Saved visited server ID and uptime.")
        end

        loadVisitedServers()  -- Load visited servers at the start

        local function convertTimeToSeconds(timeStr)
            local hours, minutes, seconds = timeStr:match("(%d+):(%d+):(%d+)")
            hours = tonumber(hours) or 0
            minutes = tonumber(minutes) or 0
            seconds = tonumber(seconds) or 0
            return (hours * 3600) + (minutes * 60) + seconds
        end

        local function getServerUptimeFromGUI()
            local uptimeLabel = player.PlayerGui:WaitForChild("serverInfo"):WaitForChild("serverInfo"):WaitForChild("uptime")
            local uptimeText = uptimeLabel.Text
            local timeStr = uptimeText:match("Server Uptime:%s*(%d+:%d+:%d+)")
            return convertTimeToSeconds(timeStr)
        end

        local function toClipboard(text)
            setclipboard(text)
        end

        local function flashScreen()
            local screenGui = Instance.new("ScreenGui")
            screenGui.Parent = player.PlayerGui
            screenGui.IgnoreGuiInset = true

            local flashFrame = Instance.new("Frame")
            flashFrame.Size = UDim2.new(1, 0, 1, 0)
            flashFrame.BackgroundColor3 = Color3.new(1, 1, 1)
            flashFrame.BorderSizePixel = 0
            flashFrame.Parent = screenGui

            for i = 1, 5 do
                flashFrame.Visible = true
                wait(0.2)
                flashFrame.Visible = false
                wait(0.2)
            end

            screenGui:Destroy()
        end

        local function serverHop()
            local gameId = game.PlaceId
            local cursor = ""
            local serversUrlPattern = "https://games.roblox.com/v1/games/" .. gameId .. "/servers/Public?sortOrder=Asc&limit=100&cursor=%s"

            while true do
                local serversUrl = serversUrlPattern:format(cursor)
                local success, result = pcall(function()
                    return HttpService:JSONDecode(game:HttpGet(serversUrl))
                end)

                if success and result.data then
                    for _, server in ipairs(result.data) do
                        if server.id ~= game.JobId and not server.private and not visitedServers[server.id] then
                            visitedServers[server.id] = true  -- Mark this server as visited
                            saveVisitedServers()  -- Save visited servers to file

                            local successJoin, errorMessage = pcall(function()
                                TeleportService:TeleportToPlaceInstance(gameId, server.id, player)
                            end)
                            if successJoin then
                                return
                            end
                        end
                    end

                    if result.nextPageCursor then
                        cursor = result.nextPageCursor
                    else
                        cursor = ""  -- Reset cursor to start over
                    end
                end

                wait(2)
            end
        end

        local function checkCurrentServer()
            local serverUptimeSeconds = getServerUptimeFromGUI()
            local currentServerId = game.JobId

            -- Save the current server's uptime
            visitedServers[currentServerId] = serverUptimeSeconds
            saveVisitedServers()

            if serverUptimeSeconds >= desiredMinUptimeSeconds then
                toClipboard(currentServerId)
                flashScreen()
            else
                serverHop()
            end
        end

        checkCurrentServer()
    end
}
